/* ----------------------------------------------------------------------------
            COMPACTION D'UN MATERIAU RECTANGULAIRE ORTHOTROPE LINEAIRE
---------------------------------------------------------------------------- */
// Parametrage de l'export `.vtk`
load "iovtk"
int[int] ordre = [1];

// Macros
macro Eps(ux, uy) ([dx(ux), dy(uy), 0.5*(dx(uy)+dy(ux))]) //EOM
macro Q() 
    [
        [1.0, 1.0, 0.0],
        [1.0, 1.0, 0.0],
        [0.0, 0.0, 1.0]
    ]
//EOM

// Discretisation temporelle
real t0 = 0;
real nt = 25;

// Maillage
mesh Th = square(32, 32);

// Espaces d'interpolation
fespace Vh(Th, [P2,P2]);

// Champs elements finis
Vh [ux, uy], [vx, vy];

// sauvegarde de la situation initiale
savevtk("out/u.0.vtk", Th, [ux, uy, 0.0], dataname="deplacement", order=ordre);

// Formulation variationnelle du probl√®me statique
problem laplacien([ux, uy], [vx, vy])
    = int2d(Th)( dx(ux)*dx(vx) + dy(ux)*dy(vx) + dx(uy)*dx(vy) + dy(uy)*dy(vy) )
    + int2d(Th)( Eps(vx, vy)' * Q * Eps(ux, uy) )
    + on(1, uy=0)
    + on(3, uy=-1/(3*nt))
    + on(4, ux=0)
    ;

for(int i=1; i < nt+1; i++)
{
    cout << "increment " << i << "    uy bord 3 = " << -1/(3*nt) << endl;

    laplacien;

    // plot(Th, [ux, uy], cmm="i = "+i);

    real airemin = checkmovemesh(Th, [x+ux, y+uy]);
    if(airemin > 0)
    {
        Th = movemesh(Th, [x+ux, y+uy]);
        [ux, uy] = [ux, uy];
    }

    savevtk("out/u." + i + ".vtk", Th, [ux, uy, 0.0], dataname="deplacement", order=ordre);
}
